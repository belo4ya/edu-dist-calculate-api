// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/belo4ya/edu-dist-calculate-api/internal/calculator/repository/models"
	mock "github.com/stretchr/testify/mock"
)

// MockInternalRepository is an autogenerated mock type for the InternalRepository type
type MockInternalRepository struct {
	mock.Mock
}

type MockInternalRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInternalRepository) EXPECT() *MockInternalRepository_Expecter {
	return &MockInternalRepository_Expecter{mock: &_m.Mock}
}

// ListExpressionTasks provides a mock function with given fields: _a0, _a1
func (_m *MockInternalRepository) ListExpressionTasks(_a0 context.Context, _a1 string) ([]models.Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListExpressionTasks")
	}

	var r0 []models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInternalRepository_ListExpressionTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExpressionTasks'
type MockInternalRepository_ListExpressionTasks_Call struct {
	*mock.Call
}

// ListExpressionTasks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockInternalRepository_Expecter) ListExpressionTasks(_a0 interface{}, _a1 interface{}) *MockInternalRepository_ListExpressionTasks_Call {
	return &MockInternalRepository_ListExpressionTasks_Call{Call: _e.mock.On("ListExpressionTasks", _a0, _a1)}
}

func (_c *MockInternalRepository_ListExpressionTasks_Call) Run(run func(_a0 context.Context, _a1 string)) *MockInternalRepository_ListExpressionTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInternalRepository_ListExpressionTasks_Call) Return(_a0 []models.Task, _a1 error) *MockInternalRepository_ListExpressionTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInternalRepository_ListExpressionTasks_Call) RunAndReturn(run func(context.Context, string) ([]models.Task, error)) *MockInternalRepository_ListExpressionTasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInternalRepository creates a new instance of MockInternalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInternalRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInternalRepository {
	mock := &MockInternalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
